<!DOCTYPE html>
<html lang="id" class="light">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Aplikasi Penyimpanan File IndexedDB</title>
    <!-- Tailwind CSS CDN -->
    <script src="https://cdn.tailwindcss.com"></script>
    <style>
        /* Menggunakan font Inter untuk tampilan yang bersih */
        body {
            font-family: 'Inter', sans-serif;
            transition: background-color 0.3s ease;
        }
        /* Kelas untuk mode gelap */
        .dark {
            @apply bg-gray-900 text-gray-100;
        }
        .dark .bg-white {
            @apply bg-gray-800 text-gray-100;
        }
        .dark .bg-gray-100 {
            @apply bg-gray-700;
        }
        .dark .bg-gray-50 {
            @apply bg-gray-700;
        }
        .dark .border-gray-300 {
            @apply border-gray-600;
        }
        .dark .text-gray-800 {
            @apply text-gray-100;
        }
        .dark .text-gray-700 {
            @apply text-gray-200;
        }
        .dark .text-gray-600 {
            @apply text-gray-300;
        }
        .dark .text-gray-500 {
            @apply text-gray-400;
        }
        /* Mengatur kursor untuk breadcrumbs */
        .breadcrumb-link {
            cursor: pointer;
        }
        /* Gaya untuk area dropzone */
        .drag-over {
            @apply border-indigo-500 bg-indigo-50;
        }
        .dark .drag-over {
            @apply bg-indigo-900 border-indigo-400;
        }
    </style>
    <!-- Font Awesome untuk ikon -->
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css" xintegrity="sha512-iecdLmaskl7CVn8QpGqUq5A1M1E3Rj4L1H6z2BqKz9x8jC+V7+8r8x+G+S+TzW8x/T9aTzJ0+A+K3h7Ew+d9+yJ/Bw==" crossorigin="anonymous" referrerpolicy="no-referrer" />
</head>
<body class="bg-gray-100 min-h-screen flex items-center justify-center p-4">
    <!-- Kontainer utama aplikasi -->
    <div class="bg-white p-6 md:p-8 rounded-2xl shadow-xl w-full max-w-2xl">
        <div class="flex justify-between items-center mb-6">
            <h1 class="text-3xl font-bold text-gray-800">Aplikasi Penyimpanan File</h1>
            <!-- Tombol Mode Gelap -->
            <button id="darkModeToggle" class="p-2 rounded-full bg-gray-200 text-gray-700 dark:bg-gray-700 dark:text-gray-200 transition">
                <i class="fas fa-moon"></i>
            </button>
        </div>

        <!-- Form untuk mengunggah file (sekarang juga dropzone) -->
        <div id="dropZone" class="mb-8 p-6 bg-gray-50 rounded-xl border-2 border-dashed border-gray-300 text-center transition">
            <h2 class="text-xl font-semibold mb-4 text-gray-700">Simpan File Baru</h2>
            <p class="text-gray-500 mb-4">Seret & lepas file di sini, atau</p>
            <form id="fileForm" class="flex flex-col md:flex-row items-center gap-4 justify-center">
                <input type="file" id="fileInput" class="w-full text-sm text-gray-500
                    file:mr-4 file:py-2 file:px-4
                    file:rounded-full file:border-0
                    file:text-sm file:font-semibold
                    file:bg-indigo-50 file:text-indigo-700
                    hover:file:bg-indigo-100 cursor-pointer"/>
                <button type="submit" id="saveButton" class="w-full md:w-auto px-6 py-2.5 bg-indigo-600 text-white font-medium text-sm leading-tight uppercase rounded-full shadow-md hover:bg-indigo-700 hover:shadow-lg focus:bg-indigo-700 focus:shadow-lg transition duration-150 ease-in-out">
                    Simpan
                </button>
            </form>
        </div>

        <!-- Bagian untuk menampilkan file yang sudah disimpan -->
        <div>
            <h2 class="text-xl font-semibold mb-4 text-gray-700">Daftar File Tersimpan</h2>
            
            <!-- Bilah kemajuan penyimpanan -->
            <div class="mb-4 p-4 bg-gray-50 rounded-xl border-2 border-gray-200">
                <div class="flex items-center justify-between text-gray-700 font-medium mb-2">
                    <span>Penggunaan Penyimpanan</span>
                    <span id="storageUsageText">0 B / 10.00 GB</span>
                </div>
                <div class="w-full bg-gray-300 rounded-full h-2.5">
                    <div id="progressBar" class="bg-indigo-600 h-2.5 rounded-full transition-all duration-300 ease-in-out" style="width: 0%;"></div>
                </div>
            </div>

            <!-- Kontrol folder, pencarian, pengurutan, dan aksi massal -->
            <div class="mb-4 flex flex-col sm:flex-row gap-4 items-stretch sm:items-center">
                <button id="createFolderButton" class="px-4 py-2 bg-green-500 text-white font-medium text-sm rounded-full shadow-md hover:bg-green-600 transition">
                    <i class="fas fa-folder-plus mr-2"></i>Buat Folder
                </button>
                <div class="relative flex-grow">
                    <input type="text" id="searchInput" placeholder="Cari file..." class="w-full pl-10 pr-4 py-2 rounded-full border-2 border-gray-300 focus:outline-none focus:border-indigo-500 transition"/>
                    <i class="fa-solid fa-search absolute left-3 top-1/2 -translate-y-1/2 text-gray-400"></i>
                </div>
                <div class="flex items-center gap-2">
                    <label for="sortSelect" class="text-gray-600">Urutkan:</label>
                    <select id="sortSelect" class="py-2 px-4 rounded-full border-2 border-gray-300 focus:outline-none focus:border-indigo-500 transition">
                        <option value="name-asc">Nama (A-Z)</option>
                        <option value="name-desc">Nama (Z-A)</option>
                        <option value="date-desc">Tanggal (Terbaru)</option>
                        <option value="date-asc">Tanggal (Terlama)</option>
                        <option value="type-asc">Tipe (A-Z)</option>
                        <option value="type-desc">Tipe (Z-A)</option>
                        <option value="size-desc">Ukuran (Terbesar)</option>
                        <option value="size-asc">Ukuran (Terkecil)</option>
                    </select>
                </div>
            </div>

            <!-- Tombol untuk aksi massal -->
            <div id="bulkActions" class="mb-4 hidden">
                <button id="bulkDeleteButton" class="px-4 py-2 bg-red-500 text-white font-medium text-sm rounded-full shadow-md hover:bg-red-600 transition">
                    <i class="fas fa-trash-alt mr-2"></i>Hapus Terpilih
                </button>
            </div>

            <!-- Breadcrumbs untuk navigasi folder -->
            <div id="breadcrumbs" class="text-sm text-gray-500 mb-4 p-2 rounded-lg bg-gray-100 flex items-center flex-wrap">
                <!-- Breadcrumbs akan ditampilkan di sini oleh JavaScript -->
            </div>

            <!-- Daftar file -->
            <div id="fileList" class="space-y-4">
                <!-- Daftar file dan folder akan ditampilkan di sini oleh JavaScript -->
                <p id="noFilesMessage" class="text-gray-500 text-center">Belum ada file yang disimpan.</p>
            </div>
        </div>
    </div>

    <!-- Kotak pesan kustom (untuk menggantikan alert) -->
    <div id="messageBox" class="fixed top-4 left-1/2 -translate-x-1/2 p-4 rounded-xl shadow-lg transition-all duration-300 opacity-0 transform -translate-y-full" role="alert">
        <span id="messageText" class="text-white font-semibold"></span>
    </div>

    <!-- Kotak konfirmasi kustom -->
    <div id="confirmDialog" class="fixed inset-0 bg-gray-900 bg-opacity-50 flex items-center justify-center hidden z-50">
        <div class="bg-white p-6 rounded-2xl shadow-xl max-w-sm w-full mx-4">
            <h3 class="text-xl font-semibold text-gray-800 mb-4">Konfirmasi</h3>
            <p id="confirmMessage" class="text-gray-600 mb-6"></p>
            <div class="flex justify-end gap-3">
                <button id="cancelButton" class="px-4 py-2 text-gray-600 font-medium rounded-full hover:bg-gray-200 transition">Batal</button>
                <button id="confirmButton" class="px-4 py-2 bg-red-600 text-white font-medium rounded-full shadow-md hover:bg-red-700 transition">Hapus</button>
            </div>
        </div>
    </div>

    <!-- Kotak dialog untuk membuat folder baru -->
    <div id="createFolderDialog" class="fixed inset-0 bg-gray-900 bg-opacity-50 flex items-center justify-center hidden z-50">
        <div class="bg-white p-6 rounded-2xl shadow-xl max-w-sm w-full mx-4">
            <h3 class="text-xl font-semibold text-gray-800 mb-4">Buat Folder Baru</h3>
            <input type="text" id="newFolderNameInput" placeholder="Masukkan nama folder..." class="w-full px-4 py-2 mb-4 rounded-full border-2 border-gray-300 focus:outline-none focus:border-indigo-500 transition"/>
            <div class="flex justify-end gap-3">
                <button id="cancelFolderButton" class="px-4 py-2 text-gray-600 font-medium rounded-full hover:bg-gray-200 transition">Batal</button>
                <button id="createFolderSubmitButton" class="px-4 py-2 bg-green-600 text-white font-medium rounded-full shadow-md hover:bg-green-700 transition">Buat</button>
            </div>
        </div>
    </div>

    <!-- Kotak dialog untuk mengubah nama -->
    <div id="renameDialog" class="fixed inset-0 bg-gray-900 bg-opacity-50 flex items-center justify-center hidden z-50">
        <div class="bg-white p-6 rounded-2xl shadow-xl max-w-sm w-full mx-4">
            <h3 class="text-xl font-semibold text-gray-800 mb-4">Ubah Nama</h3>
            <input type="text" id="renameInput" placeholder="Nama baru..." class="w-full px-4 py-2 mb-4 rounded-full border-2 border-gray-300 focus:outline-none focus:border-indigo-500 transition"/>
            <div class="flex justify-end gap-3">
                <button id="cancelRenameButton" class="px-4 py-2 text-gray-600 font-medium rounded-full hover:bg-gray-200 transition">Batal</button>
                <button id="renameSubmitButton" class="px-4 py-2 bg-indigo-600 text-white font-medium rounded-full shadow-md hover:bg-indigo-700 transition">Ubah</button>
            </div>
        </div>
    </div>

    <!-- Kotak dialog untuk memindahkan file -->
    <div id="moveDialog" class="fixed inset-0 bg-gray-900 bg-opacity-50 flex items-center justify-center hidden z-50">
        <div class="bg-white p-6 rounded-2xl shadow-xl max-w-sm w-full mx-4">
            <h3 class="text-xl font-semibold text-gray-800 mb-4">Pindahkan Item</h3>
            <p class="text-gray-600 mb-4">Pilih folder tujuan:</p>
            <div id="moveFolderList" class="max-h-48 overflow-y-auto mb-4 p-2 border border-gray-300 rounded-lg">
                <!-- Daftar folder akan diisi oleh JS -->
            </div>
            <div class="flex justify-end gap-3">
                <button id="cancelMoveButton" class="px-4 py-2 text-gray-600 font-medium rounded-full hover:bg-gray-200 transition">Batal</button>
                <button id="moveSubmitButton" class="px-4 py-2 bg-indigo-600 text-white font-medium rounded-full shadow-md hover:bg-indigo-700 transition" disabled>Pindahkan</button>
            </div>
        </div>
    </div>

    <!-- Kotak dialog untuk pratinjau file -->
    <div id="previewDialog" class="fixed inset-0 bg-gray-900 bg-opacity-50 flex items-center justify-center hidden z-50">
        <div class="bg-white p-6 rounded-2xl shadow-xl w-full max-w-2xl mx-4 relative">
            <h3 id="previewTitle" class="text-xl font-semibold text-gray-800 mb-4"></h3>
            <button id="closePreviewButton" class="absolute top-4 right-4 text-gray-400 hover:text-gray-600 transition">
                <i class="fas fa-times"></i>
            </button>
            <div id="previewContent" class="max-h-96 overflow-y-auto">
                <!-- Konten pratinjau akan diisi oleh JS -->
            </div>
        </div>
    </div>

    <script>
        document.addEventListener('DOMContentLoaded', () => {
            // Deklarasi konstanta untuk database dan object store
            const dbName = 'FileStorageDB';
            const dbVersion = 2; // Naikkan versi database untuk perubahan skema
            const storeName = 'files';

            // Batas penyimpanan dalam bytes (10 GB)
            const maxStorageBytes = 10 * 1024 * 1024 * 1024;

            // Elemen-elemen DOM
            const html = document.documentElement;
            const darkModeToggle = document.getElementById('darkModeToggle');
            const dropZone = document.getElementById('dropZone');
            const fileForm = document.getElementById('fileForm');
            const fileInput = document.getElementById('fileInput');
            const fileList = document.getElementById('fileList');
            const saveButton = document.getElementById('saveButton');
            const noFilesMessage = document.getElementById('noFilesMessage');
            const messageBox = document.getElementById('messageBox');
            const messageText = document.getElementById('messageText');
            const searchInput = document.getElementById('searchInput');
            const sortSelect = document.getElementById('sortSelect');
            const confirmDialog = document.getElementById('confirmDialog');
            const confirmMessage = document.getElementById('confirmMessage');
            const confirmButton = document.getElementById('confirmButton');
            const cancelButton = document.getElementById('cancelButton');
            const progressBar = document.getElementById('progressBar');
            const storageUsageText = document.getElementById('storageUsageText');
            const createFolderButton = document.getElementById('createFolderButton');
            const breadcrumbsContainer = document.getElementById('breadcrumbs');
            const bulkActions = document.getElementById('bulkActions');
            const bulkDeleteButton = document.getElementById('bulkDeleteButton');

            // Elemen-elemen DOM untuk dialog folder baru
            const createFolderDialog = document.getElementById('createFolderDialog');
            const newFolderNameInput = document.getElementById('newFolderNameInput');
            const createFolderSubmitButton = document.getElementById('createFolderSubmitButton');
            const cancelFolderButton = document.getElementById('cancelFolderButton');

            // Elemen-elemen DOM untuk dialog ubah nama
            const renameDialog = document.getElementById('renameDialog');
            const renameInput = document.getElementById('renameInput');
            const renameSubmitButton = document.getElementById('renameSubmitButton');
            const cancelRenameButton = document.getElementById('cancelRenameButton');

            // Elemen-elemen DOM untuk dialog pindah
            const moveDialog = document.getElementById('moveDialog');
            const moveFolderList = document.getElementById('moveFolderList');
            const moveSubmitButton = document.getElementById('moveSubmitButton');
            const cancelMoveButton = document.getElementById('cancelMoveButton');
            
            // Elemen-elemen DOM untuk dialog pratinjau
            const previewDialog = document.getElementById('previewDialog');
            const previewTitle = document.getElementById('previewTitle');
            const previewContent = document.getElementById('previewContent');
            const closePreviewButton = document.getElementById('closePreviewButton');

            let allFilesAndFolders = []; // Menyimpan semua item
            let currentPath = '/'; // Jalur folder saat ini
            let selectedItems = new Set(); // Menyimpan item yang dipilih untuk aksi massal
            let itemToRename = null; // Menyimpan item yang akan diubah namanya
            let itemToMove = null; // Menyimpan item yang akan dipindahkan
            let selectedMovePath = null; // Menyimpan jalur tujuan pindah

            // --- Fungsi untuk memformat ukuran file ---
            function formatBytes(bytes, decimals = 2) {
                if (bytes === 0) return '0 B';

                const k = 1024;
                const dm = decimals < 0 ? 0 : decimals;
                const sizes = ['B', 'KB', 'MB', 'GB', 'TB', 'PB', 'EB', 'ZB', 'YB'];

                const i = Math.floor(Math.log(bytes) / Math.log(k));

                return parseFloat((bytes / Math.pow(k, i)).toFixed(dm)) + ' ' + sizes[i];
            }

            // --- Fungsi untuk mendapatkan ikon berdasarkan tipe file ---
            function getFileIcon(mimeType, isFolder) {
                if (isFolder) {
                    return 'fas fa-folder text-yellow-500';
                }
                if (!mimeType) return 'fas fa-file text-gray-500';

                if (mimeType.startsWith('image/')) {
                    return 'fas fa-file-image text-blue-500';
                } else if (mimeType.startsWith('video/')) {
                    return 'fas fa-file-video text-purple-500';
                } else if (mimeType.startsWith('audio/')) {
                    return 'fas fa-file-audio text-pink-500';
                } else if (mimeType.startsWith('text/')) {
                    return 'fas fa-file-alt text-green-500';
                } else if (mimeType === 'application/pdf') {
                    return 'fas fa-file-pdf text-red-500';
                } else if (mimeType === 'application/zip' || mimeType === 'application/x-rar-compressed') {
                    return 'fas fa-file-archive text-orange-500';
                } else if (mimeType === 'application/msword' || mimeType === 'application/vnd.openxmlformats-officedocument.wordprocessingml.document') {
                    return 'fas fa-file-word text-blue-600';
                } else if (mimeType === 'application/vnd.ms-excel' || mimeType === 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet') {
                    return 'fas fa-file-excel text-green-600';
                } else if (mimeType === 'application/vnd.ms-powerpoint' || mimeType === 'application/vnd.openxmlformats-officedocument.presentationml.presentation') {
                    return 'fas fa-file-powerpoint text-red-600';
                }
                return 'fas fa-file text-gray-500';
            }

            // --- Fungsi untuk menampilkan pesan kustom ---
            function showMessage(message, type = 'success') {
                messageText.textContent = message;
                messageBox.classList.remove('opacity-0', '-translate-y-full');
                if (type === 'success') {
                    messageBox.style.backgroundColor = '#10B981'; // Tailwind green-500
                } else if (type === 'error') {
                    messageBox.style.backgroundColor = '#EF4444'; // Tailwind red-500
                } else {
                    messageBox.style.backgroundColor = '#3B82F6'; // Tailwind blue-500
                }
                messageBox.classList.add('opacity-100', 'translate-y-0');

                // Hilangkan pesan setelah 3 detik
                setTimeout(() => {
                    messageBox.classList.remove('opacity-100', 'translate-y-0');
                    messageBox.classList.add('opacity-0', '-translate-y-full');
                }, 3000);
            }

            // --- Fungsi untuk membuka atau membuat database IndexedDB ---
            function openDatabase() {
                return new Promise((resolve, reject) => {
                    const request = indexedDB.open(dbName, dbVersion);

                    request.onupgradeneeded = (event) => {
                        const db = event.target.result;
                        if (db.objectStoreNames.contains(storeName)) {
                            db.deleteObjectStore(storeName);
                        }
                        const store = db.createObjectStore(storeName, { keyPath: 'id', autoIncrement: true });
                        store.createIndex('date', 'date', { unique: false });
                        store.createIndex('path', 'path', { unique: false });
                    };

                    request.onsuccess = (event) => {
                        resolve(event.target.result);
                    };

                    request.onerror = (event) => {
                        console.error("Gagal membuka database:", event.target.error);
                        showMessage("Gagal membuka database.", 'error');
                        reject(event.target.error);
                    };
                });
            }

            // --- Fungsi untuk menyimpan file ke IndexedDB ---
            async function saveFile(file) {
                try {
                    const totalSize = allFilesAndFolders.reduce((sum, item) => sum + (item.size || 0), 0);
                    if (totalSize + file.size > maxStorageBytes) {
                        showMessage("Penyimpanan penuh! Hapus beberapa file untuk menyimpan yang baru.", 'error');
                        return;
                    }

                    const db = await openDatabase();
                    const transaction = db.transaction([storeName], 'readwrite');
                    const store = transaction.objectStore(storeName);

                    const fileToStore = {
                        name: file.name,
                        type: file.type,
                        size: file.size,
                        date: new Date(),
                        data: file,
                        isFolder: false,
                        path: currentPath
                    };

                    const addRequest = store.add(fileToStore);
                    
                    transaction.oncomplete = () => {
                        console.log("File berhasil disimpan!");
                        showMessage(`File '${file.name}' berhasil disimpan!`);
                        displayFiles();
                        fileInput.value = '';
                    };

                    transaction.onerror = (event) => {
                        console.error("Gagal menyimpan file:", event.target.error);
                        showMessage("Gagal menyimpan file.", 'error');
                    };
                } catch (error) {
                    console.error("Kesalahan dalam saveFile:", error);
                }
            }
            
            // --- Fungsi untuk membuat folder baru ---
            async function createFolder() {
                const folderName = newFolderNameInput.value.trim();
                if (!folderName) {
                    showMessage("Nama folder tidak boleh kosong.", 'error');
                    return;
                }

                const folderExists = allFilesAndFolders.find(item => 
                    item.isFolder && item.path === currentPath && item.name.toLowerCase() === folderName.toLowerCase()
                );
                if (folderExists) {
                    showMessage("Folder dengan nama tersebut sudah ada.", 'error');
                    return;
                }

                try {
                    const db = await openDatabase();
                    const transaction = db.transaction([storeName], 'readwrite');
                    const store = transaction.objectStore(storeName);

                    const folderToStore = {
                        name: folderName,
                        date: new Date(),
                        isFolder: true,
                        path: currentPath
                    };

                    const addRequest = store.add(folderToStore);
                    
                    transaction.oncomplete = () => {
                        console.log("Folder berhasil dibuat!");
                        showMessage(`Folder '${folderName}' berhasil dibuat!`);
                        displayFiles();
                    };

                    transaction.onerror = (event) => {
                        console.error("Gagal membuat folder:", event.target.error);
                        showMessage("Gagal membuat folder.", 'error');
                    };
                } catch (error) {
                    console.error("Kesalahan dalam createFolder:", error);
                } finally {
                    createFolderDialog.classList.add('hidden');
                    newFolderNameInput.value = '';
                }
            }

            // --- Fungsi untuk mengubah nama item ---
            async function renameItem(id, newName) {
                try {
                    const db = await openDatabase();
                    const transaction = db.transaction([storeName], 'readwrite');
                    const store = transaction.objectStore(storeName);

                    const getRequest = store.get(id);
                    getRequest.onsuccess = (event) => {
                        const item = event.target.result;
                        if (item) {
                            item.name = newName;
                            const updateRequest = store.put(item);
                            
                            updateRequest.onsuccess = () => {
                                console.log("Item berhasil diubah namanya!");
                                showMessage(`Item berhasil diubah namanya menjadi '${newName}'.`);
                                displayFiles();
                            };

                            updateRequest.onerror = (e) => {
                                console.error("Gagal mengubah nama item:", e.target.error);
                                showMessage("Gagal mengubah nama item.", 'error');
                            };
                        }
                    };
                } catch (error) {
                    console.error("Kesalahan saat mengubah nama:", error);
                }
            }
            
            // --- Fungsi untuk memindahkan item ---
            async function moveItem(id, newPath) {
                try {
                    const db = await openDatabase();
                    const transaction = db.transaction([storeName], 'readwrite');
                    const store = transaction.objectStore(storeName);

                    const getRequest = store.get(id);
                    getRequest.onsuccess = (event) => {
                        const item = event.target.result;
                        if (item) {
                            // Jika item adalah folder, perbarui juga jalur semua isinya
                            if (item.isFolder) {
                                const oldFolderPath = currentPath + item.name + '/';
                                const newFolderPath = newPath + item.name + '/';
                                
                                const getChildRequest = store.getAll();
                                getChildRequest.onsuccess = (e) => {
                                    const allItems = e.target.result;
                                    const children = allItems.filter(child => child.path.startsWith(oldFolderPath));
                                    children.forEach(child => {
                                        child.path = newFolderPath + child.path.substring(oldFolderPath.length);
                                        store.put(child);
                                    });
                                    // Perbarui item itu sendiri
                                    item.path = newPath;
                                    store.put(item);
                                };
                            } else {
                                item.path = newPath;
                                store.put(item);
                            }

                            transaction.oncomplete = () => {
                                showMessage(`Item berhasil dipindahkan.`);
                                displayFiles();
                            };
                        }
                    };
                } catch (error) {
                    console.error("Kesalahan saat memindahkan item:", error);
                }
            }

            // --- Fungsi untuk menghapus item dari IndexedDB ---
            async function deleteItem(id, name, isFolder) {
                try {
                    const db = await openDatabase();
                    const transaction = db.transaction([storeName], 'readwrite');
                    const store = transaction.objectStore(storeName);
                    
                    if (isFolder) {
                        const folderPathToDelete = currentPath + name + '/';
                        const itemsToDelete = allFilesAndFolders.filter(item => item.path.startsWith(folderPathToDelete) || item.path === folderPathToDelete);
                        itemsToDelete.forEach(item => store.delete(item.id));
                    }
                    
                    const deleteRequest = store.delete(id);

                    transaction.oncomplete = () => {
                        console.log("Item berhasil dihapus!");
                        showMessage(`'${name}' berhasil dihapus!`);
                        displayFiles();
                    };

                    transaction.onerror = (event) => {
                        console.error("Gagal menghapus item:", event.target.error);
                        showMessage("Gagal menghapus item.", 'error');
                    };
                } catch (error) {
                    console.error("Kesalahan dalam deleteItem:", error);
                }
            }

            // --- Fungsi untuk menghapus beberapa item ---
            async function bulkDeleteItems(idsToDelete) {
                try {
                    const db = await openDatabase();
                    const transaction = db.transaction([storeName], 'readwrite');
                    const store = transaction.objectStore(storeName);

                    idsToDelete.forEach(id => {
                        const item = allFilesAndFolders.find(item => item.id === id);
                        if (item && item.isFolder) {
                            // Jika item adalah folder, hapus juga semua isinya
                            const folderPathToDelete = item.path + item.name + '/';
                            const itemsToDeleteInFolder = allFilesAndFolders.filter(child => child.path.startsWith(folderPathToDelete));
                            itemsToDeleteInFolder.forEach(child => store.delete(child.id));
                        }
                        store.delete(id);
                    });

                    transaction.oncomplete = () => {
                        showMessage(`${idsToDelete.size} item berhasil dihapus.`);
                        selectedItems.clear(); // Bersihkan pilihan
                        toggleBulkActionsButton();
                        displayFiles();
                    };

                    transaction.onerror = (event) => {
                        console.error("Gagal menghapus item massal:", event.target.error);
                        showMessage("Gagal menghapus item massal.", 'error');
                    };
                } catch (error) {
                    console.error("Kesalahan dalam bulkDeleteItems:", error);
                }
            }

            // --- Fungsi untuk menampilkan kotak dialog konfirmasi kustom ---
            function showConfirmDialog(message) {
                return new Promise((resolve) => {
                    confirmMessage.textContent = message;
                    confirmDialog.classList.remove('hidden');

                    const onConfirm = () => {
                        confirmDialog.classList.add('hidden');
                        confirmButton.removeEventListener('click', onConfirm);
                        cancelButton.removeEventListener('click', onCancel);
                        resolve(true);
                    };

                    const onCancel = () => {
                        confirmDialog.classList.add('hidden');
                        confirmButton.removeEventListener('click', onConfirm);
                        cancelButton.removeEventListener('click', onCancel);
                        resolve(false);
                    };
                    
                    confirmButton.addEventListener('click', onConfirm);
                    cancelButton.addEventListener('click', onCancel);
                });
            }

            // --- Fungsi untuk menampilkan semua file dan folder dari IndexedDB ---
            async function displayFiles() {
                fileList.innerHTML = '';
                try {
                    const db = await openDatabase();
                    const transaction = db.transaction([storeName], 'readonly');
                    const store = transaction.objectStore(storeName);

                    const getAllRequest = store.getAll();

                    getAllRequest.onsuccess = (event) => {
                        allFilesAndFolders = event.target.result;
                        updateProgressBar();
                        renderBreadcrumbs();
                        filterAndSortFiles();
                    };

                    getAllRequest.onerror = (event) => {
                        console.error("Gagal mendapatkan item:", event.target.error);
                    };
                } catch (error) {
                    console.error("Kesalahan dalam displayFiles:", error);
                }
            }

            // --- Fungsi untuk memperbarui bilah kemajuan penyimpanan ---
            function updateProgressBar() {
                const totalSize = allFilesAndFolders.reduce((sum, item) => sum + (item.size || 0), 0);
                const percentage = (totalSize / maxStorageBytes) * 100;

                progressBar.style.width = `${Math.min(percentage, 100)}%`;
                storageUsageText.textContent = `${formatBytes(totalSize)} / ${formatBytes(maxStorageBytes)}`;

                if (percentage > 90) {
                    progressBar.classList.remove('bg-indigo-600');
                    progressBar.classList.add('bg-red-500');
                } else if (percentage > 70) {
                    progressBar.classList.remove('bg-indigo-600', 'bg-red-500');
                    progressBar.classList.add('bg-yellow-500');
                } else {
                    progressBar.classList.remove('bg-red-500', 'bg-yellow-500');
                    progressBar.classList.add('bg-indigo-600');
                }
            }

            // --- Fungsi untuk merender breadcrumbs ---
            function renderBreadcrumbs() {
                breadcrumbsContainer.innerHTML = '';
                let pathSegments = currentPath.split('/').filter(p => p !== '');

                const rootLink = document.createElement('a');
                rootLink.textContent = 'Home';
                rootLink.className = 'text-blue-600 hover:underline breadcrumb-link';
                rootLink.addEventListener('click', () => {
                    currentPath = '/';
                    displayFiles();
                });
                breadcrumbsContainer.appendChild(rootLink);

                pathSegments.forEach((segment, index) => {
                    const chevron = document.createElement('span');
                    chevron.textContent = ' / ';
                    chevron.className = 'mx-1 text-gray-400';
                    breadcrumbsContainer.appendChild(chevron);

                    const pathLink = document.createElement('a');
                    pathLink.textContent = segment;
                    if (index === pathSegments.length - 1) {
                        pathLink.className = 'text-gray-800 font-semibold dark:text-gray-200';
                    } else {
                        pathLink.className = 'text-blue-600 hover:underline breadcrumb-link';
                        pathLink.addEventListener('click', () => {
                            currentPath = '/' + pathSegments.slice(0, index + 1).join('/') + '/';
                            displayFiles();
                        });
                    }
                    breadcrumbsContainer.appendChild(pathLink);
                });
            }

            // --- Fungsi untuk memfilter dan mengurutkan file ---
            function filterAndSortFiles() {
                const searchTerm = searchInput.value.toLowerCase();
                const sortOption = sortSelect.value;
                
                let filteredItems = allFilesAndFolders.filter(item => {
                    const inCurrentPath = (item.path || '/') === currentPath;
                    const matchesSearch = item.name.toLowerCase().includes(searchTerm);
                    return inCurrentPath && matchesSearch;
                });
                
                // Pisahkan folder dan file untuk rendering yang benar
                let folders = filteredItems.filter(item => item.isFolder);
                let files = filteredItems.filter(item => !item.isFolder);

                folders.sort((a, b) => a.name.localeCompare(b.name));
                
                // Logika pengurutan baru
                files.sort((a, b) => {
                    switch (sortOption) {
                        case 'name-asc': return a.name.localeCompare(b.name);
                        case 'name-desc': return b.name.localeCompare(a.name);
                        case 'date-desc': return new Date(b.date) - new Date(a.date);
                        case 'date-asc': return new Date(a.date) - new Date(b.date);
                        case 'type-asc': return (a.type || '').localeCompare(b.type || '');
                        case 'type-desc': return (b.type || '').localeCompare(a.type || '');
                        case 'size-desc': return (b.size || 0) - (a.size || 0);
                        case 'size-asc': return (a.size || 0) - (b.size || 0);
                        default: return 0;
                    }
                });

                renderItems([...folders, ...files]);
            }

            // --- Fungsi untuk merender daftar file dan folder ke DOM ---
            function renderItems(itemsToRender) {
                fileList.innerHTML = '';
                if (itemsToRender.length === 0) {
                    noFilesMessage.classList.remove('hidden');
                } else {
                    noFilesMessage.classList.add('hidden');
                    itemsToRender.forEach(itemData => {
                        const itemContainer = document.createElement('div');
                        itemContainer.className = 'flex flex-col sm:flex-row items-start sm:items-center justify-between p-4 bg-gray-100 rounded-lg shadow-sm hover:bg-gray-200 dark:hover:bg-gray-600 transition space-y-2 sm:space-y-0';
                        
                        const itemInfoContainer = document.createElement('div');
                        itemInfoContainer.className = 'flex-1 min-w-0 flex items-center';

                        // Kotak centang untuk aksi massal
                        const checkbox = document.createElement('input');
                        checkbox.type = 'checkbox';
                        checkbox.className = 'mr-4 h-5 w-5 rounded text-indigo-600 focus:ring-indigo-500';
                        checkbox.checked = selectedItems.has(itemData.id);
                        checkbox.addEventListener('change', () => {
                            if (checkbox.checked) {
                                selectedItems.add(itemData.id);
                            } else {
                                selectedItems.delete(itemData.id);
                            }
                            toggleBulkActionsButton();
                        });
                        itemInfoContainer.appendChild(checkbox);

                        const itemIcon = document.createElement('i');
                        itemIcon.className = `mr-3 text-2xl ${getFileIcon(itemData.type, itemData.isFolder)}`;
                        itemInfoContainer.appendChild(itemIcon);

                        const itemNameLink = document.createElement('a');
                        itemNameLink.className = `font-medium truncate text-lg block ${itemData.isFolder ? 'cursor-pointer' : ''} text-gray-800 dark:text-gray-100 hover:text-blue-600 dark:hover:text-blue-400 transition`;
                        itemNameLink.textContent = itemData.name;
                        
                        if (itemData.isFolder) {
                            itemNameLink.addEventListener('click', () => {
                                currentPath += itemData.name + '/';
                                displayFiles();
                            });
                        } else {
                            // Pratinjau file
                            itemNameLink.addEventListener('click', (e) => {
                                e.preventDefault();
                                previewFile(itemData);
                            });
                            itemNameLink.href = '#';
                        }
                        
                        const itemDetails = document.createElement('p');
                        itemDetails.className = 'text-gray-500 text-sm';
                        const itemDate = new Date(itemData.date).toLocaleString('id-ID');
                        itemDetails.textContent = itemData.isFolder ? `Dibuat: ${itemDate}` : `Ukuran: ${formatBytes(itemData.size)} | Disimpan: ${itemDate}`;
                        
                        const detailsContainer = document.createElement('div');
                        detailsContainer.className = 'flex-1 min-w-0';
                        detailsContainer.appendChild(itemNameLink);
                        detailsContainer.appendChild(itemDetails);
                        itemInfoContainer.appendChild(detailsContainer);

                        // Kontainer untuk tombol aksi
                        const actionButtonsContainer = document.createElement('div');
                        actionButtonsContainer.className = 'flex-shrink-0 flex items-center space-x-2';
                        
                        // Tombol Ubah Nama
                        const renameButton = document.createElement('button');
                        renameButton.className = 'w-9 h-9 flex items-center justify-center rounded-full bg-blue-200 text-blue-700 hover:bg-blue-300 transition';
                        renameButton.innerHTML = `<i class="fas fa-edit"></i>`;
                        renameButton.title = `Ubah nama`;
                        renameButton.addEventListener('click', () => {
                            itemToRename = itemData;
                            renameInput.value = itemData.name;
                            renameDialog.classList.remove('hidden');
                            renameInput.focus();
                        });
                        actionButtonsContainer.appendChild(renameButton);

                        // Tombol Pindah
                        const moveButton = document.createElement('button');
                        moveButton.className = 'w-9 h-9 flex items-center justify-center rounded-full bg-purple-200 text-purple-700 hover:bg-purple-300 transition';
                        moveButton.innerHTML = `<i class="fas fa-arrows-alt"></i>`;
                        moveButton.title = `Pindahkan`;
                        moveButton.addEventListener('click', () => {
                            itemToMove = itemData;
                            renderMoveFolderList();
                            moveDialog.classList.remove('hidden');
                        });
                        actionButtonsContainer.appendChild(moveButton);

                        // Tombol Hapus
                        const deleteButton = document.createElement('button');
                        deleteButton.className = 'w-9 h-9 flex items-center justify-center rounded-full bg-red-200 text-red-700 hover:bg-red-300 transition';
                        deleteButton.innerHTML = `<i class="fas fa-trash"></i>`;
                        deleteButton.title = `Hapus ${itemData.isFolder ? 'Folder' : 'File'}`;
                        deleteButton.addEventListener('click', async () => {
                            const message = itemData.isFolder
                                ? `Apakah Anda yakin ingin menghapus folder '${itemData.name}' dan semua isinya?`
                                : `Apakah Anda yakin ingin menghapus file '${itemData.name}'?`;
                            const confirmed = await showConfirmDialog(message);
                            if (confirmed) {
                                deleteItem(itemData.id, itemData.name, itemData.isFolder);
                            }
                        });
                        actionButtonsContainer.appendChild(deleteButton);

                        itemContainer.appendChild(itemInfoContainer);
                        itemContainer.appendChild(actionButtonsContainer);
                        fileList.appendChild(itemContainer);
                    });
                }
            }

            // --- Fungsi untuk menampilkan/menyembunyikan tombol aksi massal ---
            function toggleBulkActionsButton() {
                if (selectedItems.size > 0) {
                    bulkActions.classList.remove('hidden');
                } else {
                    bulkActions.classList.add('hidden');
                }
            }

            // --- Fungsi untuk merender daftar folder untuk dialog pindah ---
            function renderMoveFolderList() {
                moveFolderList.innerHTML = '';
                moveSubmitButton.disabled = true;
                selectedMovePath = null;

                const folders = allFilesAndFolders.filter(item => item.isFolder);
                const currentPathSegments = currentPath.split('/').filter(p => p);

                // Tambahkan opsi "Home"
                const homeDiv = document.createElement('div');
                homeDiv.className = 'p-2 rounded-lg cursor-pointer hover:bg-gray-200 dark:hover:bg-gray-600 flex items-center';
                homeDiv.innerHTML = `<i class="fas fa-home mr-2 text-gray-500"></i> Home`;
                homeDiv.addEventListener('click', () => {
                    selectMovePath('/', homeDiv);
                });
                moveFolderList.appendChild(homeDiv);
                
                folders.forEach(folder => {
                    if (folder.path === currentPath) return; // Jangan tampilkan folder di direktori saat ini

                    // Sembunyikan subfolder dari item yang akan dipindahkan
                    const folderPath = folder.path + folder.name + '/';
                    const itemPath = itemToMove.isFolder ? itemToMove.path + itemToMove.name + '/' : itemToMove.path;
                    if (folderPath.startsWith(itemPath)) return;
                    
                    const folderDiv = document.createElement('div');
                    folderDiv.className = 'p-2 rounded-lg cursor-pointer hover:bg-gray-200 dark:hover:bg-gray-600 flex items-center';
                    folderDiv.innerHTML = `<i class="${getFileIcon(null, true)} mr-2"></i> ${folder.path}${folder.name}`;
                    folderDiv.addEventListener('click', () => {
                        selectMovePath(folderPath, folderDiv);
                    });
                    moveFolderList.appendChild(folderDiv);
                });

                function selectMovePath(path, element) {
                    selectedMovePath = path;
                    moveSubmitButton.disabled = false;
                    document.querySelectorAll('#moveFolderList > div').forEach(div => {
                        div.classList.remove('bg-indigo-200', 'dark:bg-indigo-700');
                    });
                    element.classList.add('bg-indigo-200', 'dark:bg-indigo-700');
                }
            }

            // --- Fungsi untuk menampilkan pratinjau file ---
            function previewFile(itemData) {
                previewTitle.textContent = itemData.name;
                previewContent.innerHTML = '';

                const mimeType = itemData.type || '';
                const fileBlob = itemData.data;

                if (mimeType.startsWith('image/')) {
                    const img = document.createElement('img');
                    img.src = URL.createObjectURL(fileBlob);
                    img.className = 'max-w-full h-auto rounded-lg shadow-md';
                    previewContent.appendChild(img);
                } else if (mimeType.startsWith('text/')) {
                    const reader = new FileReader();
                    reader.onload = function(event) {
                        const pre = document.createElement('pre');
                        pre.textContent = event.target.result;
                        pre.className = 'bg-gray-100 dark:bg-gray-700 p-4 rounded-lg overflow-x-auto whitespace-pre-wrap break-words';
                        previewContent.appendChild(pre);
                    };
                    reader.readAsText(fileBlob);
                } else {
                    const p = document.createElement('p');
                    p.className = 'text-gray-600 dark:text-gray-300';
                    p.textContent = `Tidak ada pratinjau yang tersedia untuk tipe file '${mimeType}'. Silakan unduh untuk melihatnya.`;
                    previewContent.appendChild(p);
                }
                previewDialog.classList.remove('hidden');
            }
            
            // --- Event Listeners ---
            
            // Toggle Dark Mode
            darkModeToggle.addEventListener('click', () => {
                if (html.classList.contains('light')) {
                    html.classList.remove('light');
                    html.classList.add('dark');
                    darkModeToggle.innerHTML = '<i class="fas fa-sun"></i>';
                } else {
                    html.classList.remove('dark');
                    html.classList.add('light');
                    darkModeToggle.innerHTML = '<i class="fas fa-moon"></i>';
                }
            });

            // Drag-and-drop
            ['dragenter', 'dragover', 'dragleave', 'drop'].forEach(eventName => {
                dropZone.addEventListener(eventName, (e) => {
                    e.preventDefault();
                    e.stopPropagation();
                }, false);
            });
            ['dragenter', 'dragover'].forEach(eventName => {
                dropZone.addEventListener(eventName, () => dropZone.classList.add('drag-over'), false);
            });
            ['dragleave', 'drop'].forEach(eventName => {
                dropZone.addEventListener(eventName, () => dropZone.classList.remove('drag-over'), false);
            });
            dropZone.addEventListener('drop', (e) => {
                const files = e.dataTransfer.files;
                if (files.length > 0) {
                    // Hanya tangani file pertama dari yang di-drop
                    saveButton.disabled = true;
                    saveButton.textContent = "Menyimpan...";
                    saveFile(files[0]).finally(() => {
                        saveButton.disabled = false;
                        saveButton.textContent = "Simpan";
                    });
                }
            }, false);

            fileForm.addEventListener('submit', (event) => {
                event.preventDefault();
                const file = fileInput.files[0];

                if (file) {
                    saveButton.disabled = true;
                    saveButton.textContent = "Menyimpan...";
                    saveFile(file).finally(() => {
                        saveButton.disabled = false;
                        saveButton.textContent = "Simpan";
                    });
                } else {
                    showMessage("Pilih file terlebih dahulu.", 'error');
                }
            });

            createFolderButton.addEventListener('click', () => {
                createFolderDialog.classList.remove('hidden');
                newFolderNameInput.focus();
            });

            cancelFolderButton.addEventListener('click', () => {
                createFolderDialog.classList.add('hidden');
                newFolderNameInput.value = '';
            });

            createFolderSubmitButton.addEventListener('click', createFolder);
            
            searchInput.addEventListener('input', filterAndSortFiles);
            sortSelect.addEventListener('change', filterAndSortFiles);

            bulkDeleteButton.addEventListener('click', async () => {
                if (selectedItems.size === 0) return;
                const message = `Apakah Anda yakin ingin menghapus ${selectedItems.size} item terpilih?`;
                const confirmed = await showConfirmDialog(message);
                if (confirmed) {
                    bulkDeleteItems(selectedItems);
                }
            });

            renameSubmitButton.addEventListener('click', () => {
                const newName = renameInput.value.trim();
                if (newName && itemToRename) {
                    renameItem(itemToRename.id, newName);
                    renameDialog.classList.add('hidden');
                }
            });

            cancelRenameButton.addEventListener('click', () => {
                renameDialog.classList.add('hidden');
                renameInput.value = '';
                itemToRename = null;
            });

            moveSubmitButton.addEventListener('click', () => {
                if (selectedMovePath && itemToMove) {
                    moveItem(itemToMove.id, selectedMovePath);
                    moveDialog.classList.add('hidden');
                    itemToMove = null;
                    selectedMovePath = null;
                }
            });

            cancelMoveButton.addEventListener('click', () => {
                moveDialog.classList.add('hidden');
                itemToMove = null;
                selectedMovePath = null;
            });

            closePreviewButton.addEventListener('click', () => {
                previewDialog.classList.add('hidden');
            });

            // Panggil fungsi displayFiles saat halaman dimuat
            displayFiles();
        });
    </script>
</body>
</html>
