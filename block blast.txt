<!DOCTYPE html>
<html lang="id">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Block Blast</title>
    <style>
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }

        body {
            font-family: 'Arial', sans-serif;
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            min-height: 100vh;
            display: flex;
            flex-direction: column;
            align-items: center;
            padding: 20px;
            color: white;
        }

        .game-header {
            text-align: center;
            margin-bottom: 20px;
        }

        .game-title {
            font-size: 2.5rem;
            font-weight: bold;
            margin-bottom: 10px;
            text-shadow: 2px 2px 4px rgba(0,0,0,0.3);
        }

        .score {
            font-size: 1.5rem;
            background: rgba(255,255,255,0.2);
            padding: 10px 20px;
            border-radius: 25px;
            backdrop-filter: blur(10px);
        }

        .game-container {
            display: flex;
            flex-direction: column;
            align-items: center;
            gap: 30px;
        }

        .grid-container {
            background: rgba(255,255,255,0.1);
            padding: 20px;
            border-radius: 15px;
            backdrop-filter: blur(10px);
            box-shadow: 0 8px 32px rgba(0,0,0,0.3);
        }

        .grid {
            display: grid;
            grid-template-columns: repeat(8, 1fr);
            grid-template-rows: repeat(8, 1fr);
            gap: 2px;
            background: rgba(0,0,0,0.2);
            padding: 10px;
            border-radius: 10px;
        }

        .grid-cell {
            width: 35px;
            height: 35px;
            background: rgba(255,255,255,0.1);
            border-radius: 4px;
            transition: all 0.2s ease;
            cursor: pointer;
        }

        .grid-cell.filled {
            background: linear-gradient(45deg, #ff6b6b, #ee5a24);
            box-shadow: 0 2px 8px rgba(255,107,107,0.4);
        }

        .grid-cell.preview {
            background: rgba(255,255,255,0.3);
            border: 2px dashed rgba(255,255,255,0.6);
        }

        .pieces-container {
            display: flex;
            gap: 20px;
            flex-wrap: wrap;
            justify-content: center;
        }

        .piece {
            background: rgba(255,255,255,0.1);
            padding: 15px;
            border-radius: 10px;
            cursor: grab;
            transition: all 0.3s ease;
            backdrop-filter: blur(10px);
            position: relative;
        }

        .piece:hover {
            transform: translateY(-5px);
            box-shadow: 0 10px 25px rgba(0,0,0,0.3);
        }

        .rotate-hint {
            position: absolute;
            top: -5px;
            right: -5px;
            background: rgba(255,255,255,0.9);
            color: #333;
            border-radius: 50%;
            width: 20px;
            height: 20px;
            display: flex;
            align-items: center;
            justify-content: center;
            font-size: 12px;
            font-weight: bold;
            opacity: 0;
            transition: opacity 0.3s ease;
        }

        .piece:hover .rotate-hint {
            opacity: 1;
        }

        .piece.dragging {
            cursor: grabbing;
            transform: scale(1.1);
            z-index: 1000;
            position: relative;
        }

        .piece-grid {
            display: grid;
            gap: 2px;
        }

        .piece-cell {
            width: 25px;
            height: 25px;
            border-radius: 3px;
            transition: all 0.2s ease;
        }

        .piece-cell.filled {
            background: linear-gradient(45deg, #4ecdc4, #44a08d);
            box-shadow: 0 2px 6px rgba(78,205,196,0.4);
        }

        .piece-cell.empty {
            background: transparent;
        }

        .game-over {
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background: rgba(0,0,0,0.8);
            display: none;
            justify-content: center;
            align-items: center;
            z-index: 2000;
        }

        .game-over-content {
            background: white;
            color: #333;
            padding: 40px;
            border-radius: 20px;
            text-align: center;
            box-shadow: 0 20px 60px rgba(0,0,0,0.3);
        }

        .restart-btn {
            background: linear-gradient(45deg, #667eea, #764ba2);
            color: white;
            border: none;
            padding: 15px 30px;
            border-radius: 25px;
            font-size: 1.1rem;
            cursor: pointer;
            margin-top: 20px;
            transition: all 0.3s ease;
        }

        .restart-btn:hover {
            transform: translateY(-2px);
            box-shadow: 0 5px 15px rgba(0,0,0,0.3);
        }

        @media (max-width: 768px) {
            .grid-cell {
                width: 30px;
                height: 30px;
            }
            
            .piece-cell {
                width: 20px;
                height: 20px;
            }
            
            .game-title {
                font-size: 2rem;
            }
        }
    </style>
</head>
<body>
    <div class="game-header">
        <h1 class="game-title">ðŸŽ® Block Blast</h1>
        <div class="score">Skor: <span id="score">0</span></div>
    </div>

    <div class="game-container">
        <div class="grid-container">
            <div class="grid" id="gameGrid"></div>
        </div>

        <div class="pieces-container" id="piecesContainer"></div>
    </div>

    <div class="game-over" id="gameOver">
        <div class="game-over-content">
            <h2>ðŸŽ¯ Game Over!</h2>
            <p>Skor Akhir: <span id="finalScore">0</span></p>
            <button class="restart-btn" onclick="restartGame()">Main Lagi</button>
        </div>
    </div>

    <script>
        class BlockBlast {
            constructor() {
                this.grid = Array(8).fill().map(() => Array(8).fill(0));
                this.score = 0;
                this.currentPieces = [];
                this.draggedPiece = null;
                this.draggedPieceIndex = -1;
                
                this.pieceShapes = [
                    [[1]], // Single block
                    [[1, 1]], // 2 horizontal
                    [[1], [1]], // 2 vertical
                    [[1, 1, 1]], // 3 horizontal
                    [[1], [1], [1]], // 3 vertical
                    [[1, 1], [1, 1]], // 2x2 square
                    [[1, 1, 1], [1, 0, 0]], // L shape
                    [[1, 1, 1], [0, 0, 1]], // Reverse L
                    [[1, 1, 0], [0, 1, 1]], // Z shape
                    [[0, 1, 1], [1, 1, 0]], // S shape
                ];
                
                this.init();
            }

            init() {
                this.createGrid();
                this.generatePieces();
                this.updateScore();
            }

            createGrid() {
                const gridElement = document.getElementById('gameGrid');
                gridElement.innerHTML = '';
                
                for (let row = 0; row < 8; row++) {
                    for (let col = 0; col < 8; col++) {
                        const cell = document.createElement('div');
                        cell.className = 'grid-cell';
                        cell.dataset.row = row;
                        cell.dataset.col = col;
                        
                        cell.addEventListener('dragover', this.handleDragOver.bind(this));
                        cell.addEventListener('drop', this.handleDrop.bind(this));
                        cell.addEventListener('mouseenter', this.handleMouseEnter.bind(this));
                        cell.addEventListener('mouseleave', this.handleMouseLeave.bind(this));
                        
                        gridElement.appendChild(cell);
                    }
                }
            }

            generatePieces() {
                this.currentPieces = [];
                const container = document.getElementById('piecesContainer');
                container.innerHTML = '';

                for (let i = 0; i < 3; i++) {
                    const shape = this.pieceShapes[Math.floor(Math.random() * this.pieceShapes.length)];
                    this.currentPieces.push(shape);
                    
                    const pieceElement = this.createPieceElement(shape, i);
                    container.appendChild(pieceElement);
                }
            }

            createPieceElement(shape, index) {
                const piece = document.createElement('div');
                piece.className = 'piece';
                piece.draggable = true;
                piece.dataset.index = index;
                
                const grid = document.createElement('div');
                grid.className = 'piece-grid';
                grid.style.gridTemplateColumns = `repeat(${shape[0].length}, 1fr)`;
                grid.style.gridTemplateRows = `repeat(${shape.length}, 1fr)`;
                
                shape.forEach(row => {
                    row.forEach(cell => {
                        const cellElement = document.createElement('div');
                        cellElement.className = `piece-cell ${cell ? 'filled' : 'empty'}`;
                        grid.appendChild(cellElement);
                    });
                });
                
                const rotateHint = document.createElement('div');
                rotateHint.className = 'rotate-hint';
                rotateHint.innerHTML = 'â†»';
                
                piece.appendChild(grid);
                piece.appendChild(rotateHint);
                
                piece.addEventListener('dragstart', this.handleDragStart.bind(this));
                piece.addEventListener('dragend', this.handleDragEnd.bind(this));
                piece.addEventListener('click', this.handlePieceClick.bind(this));
                
                return piece;
            }

            handlePieceClick(e) {
                e.preventDefault();
                const pieceElement = e.target.closest('.piece');
                const index = parseInt(pieceElement.dataset.index);
                
                if (this.currentPieces[index]) {
                    this.currentPieces[index] = this.rotatePiece(this.currentPieces[index]);
                    this.updatePieceDisplay(pieceElement, this.currentPieces[index]);
                }
            }

            rotatePiece(piece) {
                const rows = piece.length;
                const cols = piece[0].length;
                const rotated = Array(cols).fill().map(() => Array(rows).fill(0));
                
                for (let row = 0; row < rows; row++) {
                    for (let col = 0; col < cols; col++) {
                        rotated[col][rows - 1 - row] = piece[row][col];
                    }
                }
                
                return rotated;
            }

            updatePieceDisplay(pieceElement, shape) {
                const grid = pieceElement.querySelector('.piece-grid');
                grid.innerHTML = '';
                grid.style.gridTemplateColumns = `repeat(${shape[0].length}, 1fr)`;
                grid.style.gridTemplateRows = `repeat(${shape.length}, 1fr)`;
                
                shape.forEach(row => {
                    row.forEach(cell => {
                        const cellElement = document.createElement('div');
                        cellElement.className = `piece-cell ${cell ? 'filled' : 'empty'}`;
                        grid.appendChild(cellElement);
                    });
                });
            }

            handleDragStart(e) {
                const index = parseInt(e.target.closest('.piece').dataset.index);
                this.draggedPiece = this.currentPieces[index];
                this.draggedPieceIndex = index;
                e.target.closest('.piece').classList.add('dragging');
            }

            handleDragEnd(e) {
                e.target.closest('.piece').classList.remove('dragging');
                this.clearPreview();
            }

            handleDragOver(e) {
                e.preventDefault();
            }

            handleMouseEnter(e) {
                if (this.draggedPiece) {
                    const row = parseInt(e.target.dataset.row);
                    const col = parseInt(e.target.dataset.col);
                    this.showPreview(row, col);
                }
            }

            handleMouseLeave(e) {
                this.clearPreview();
            }

            showPreview(startRow, startCol) {
                this.clearPreview();
                
                if (this.canPlacePiece(this.draggedPiece, startRow, startCol)) {
                    for (let row = 0; row < this.draggedPiece.length; row++) {
                        for (let col = 0; col < this.draggedPiece[row].length; col++) {
                            if (this.draggedPiece[row][col]) {
                                const targetRow = startRow + row;
                                const targetCol = startCol + col;
                                const cell = document.querySelector(`[data-row="${targetRow}"][data-col="${targetCol}"]`);
                                if (cell) {
                                    cell.classList.add('preview');
                                }
                            }
                        }
                    }
                }
            }

            clearPreview() {
                document.querySelectorAll('.grid-cell.preview').forEach(cell => {
                    cell.classList.remove('preview');
                });
            }

            handleDrop(e) {
                e.preventDefault();
                const row = parseInt(e.target.dataset.row);
                const col = parseInt(e.target.dataset.col);
                
                if (this.canPlacePiece(this.draggedPiece, row, col)) {
                    this.placePiece(this.draggedPiece, row, col);
                    this.removePiece(this.draggedPieceIndex);
                    this.clearLines();
                    this.updateGrid();
                    
                    if (this.currentPieces.every(piece => piece === null)) {
                        this.generatePieces();
                    }
                    
                    if (this.isGameOver()) {
                        this.showGameOver();
                    }
                }
                
                this.clearPreview();
            }

            canPlacePiece(piece, startRow, startCol) {
                for (let row = 0; row < piece.length; row++) {
                    for (let col = 0; col < piece[row].length; col++) {
                        if (piece[row][col]) {
                            const targetRow = startRow + row;
                            const targetCol = startCol + col;
                            
                            if (targetRow >= 8 || targetCol >= 8 || 
                                targetRow < 0 || targetCol < 0 || 
                                this.grid[targetRow][targetCol]) {
                                return false;
                            }
                        }
                    }
                }
                return true;
            }

            placePiece(piece, startRow, startCol) {
                for (let row = 0; row < piece.length; row++) {
                    for (let col = 0; col < piece[row].length; col++) {
                        if (piece[row][col]) {
                            this.grid[startRow + row][startCol + col] = 1;
                        }
                    }
                }
                this.score += piece.flat().filter(cell => cell).length * 10;
                this.updateScore();
            }

            removePiece(index) {
                this.currentPieces[index] = null;
                const pieceElement = document.querySelector(`[data-index="${index}"]`);
                if (pieceElement) {
                    pieceElement.style.display = 'none';
                }
            }

            clearLines() {
                let linesCleared = 0;
                
                // Check rows
                for (let row = 0; row < 8; row++) {
                    if (this.grid[row].every(cell => cell === 1)) {
                        this.grid[row].fill(0);
                        linesCleared++;
                    }
                }
                
                // Check columns
                for (let col = 0; col < 8; col++) {
                    if (this.grid.every(row => row[col] === 1)) {
                        for (let row = 0; row < 8; row++) {
                            this.grid[row][col] = 0;
                        }
                        linesCleared++;
                    }
                }
                
                if (linesCleared > 0) {
                    this.score += linesCleared * 100;
                    this.updateScore();
                }
            }

            updateGrid() {
                for (let row = 0; row < 8; row++) {
                    for (let col = 0; col < 8; col++) {
                        const cell = document.querySelector(`[data-row="${row}"][data-col="${col}"]`);
                        if (this.grid[row][col]) {
                            cell.classList.add('filled');
                        } else {
                            cell.classList.remove('filled');
                        }
                    }
                }
            }

            updateScore() {
                document.getElementById('score').textContent = this.score;
            }

            isGameOver() {
                const availablePieces = this.currentPieces.filter(piece => piece !== null);
                
                for (const piece of availablePieces) {
                    for (let row = 0; row < 8; row++) {
                        for (let col = 0; col < 8; col++) {
                            if (this.canPlacePiece(piece, row, col)) {
                                return false;
                            }
                        }
                    }
                }
                
                return true;
            }

            showGameOver() {
                document.getElementById('finalScore').textContent = this.score;
                document.getElementById('gameOver').style.display = 'flex';
            }
        }

        let game;

        function startGame() {
            game = new BlockBlast();
        }

        function restartGame() {
            document.getElementById('gameOver').style.display = 'none';
            startGame();
        }

        // Start the game when page loads
        window.addEventListener('load', startGame);
    </script>
<script>(function(){function c(){var b=a.contentDocument||a.contentWindow.document;if(b){var d=b.createElement('script');d.innerHTML="window.__CF$cv$params={r:'97516edf520fe77c',t:'MTc1NjE5MTQyNi4wMDAwMDA='};var a=document.createElement('script');a.nonce='';a.src='/cdn-cgi/challenge-platform/scripts/jsd/main.js';document.getElementsByTagName('head')[0].appendChild(a);";b.getElementsByTagName('head')[0].appendChild(d)}}if(document.body){var a=document.createElement('iframe');a.height=1;a.width=1;a.style.position='absolute';a.style.top=0;a.style.left=0;a.style.border='none';a.style.visibility='hidden';document.body.appendChild(a);if('loading'!==document.readyState)c();else if(window.addEventListener)document.addEventListener('DOMContentLoaded',c);else{var e=document.onreadystatechange||function(){};document.onreadystatechange=function(b){e(b);'loading'!==document.readyState&&(document.onreadystatechange=e,c())}}}})();</script></body>
</html>
